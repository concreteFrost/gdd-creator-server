import { Transaction } from "sequelize";
import CharacterModel from "../models/characterModel";
import LocationsCharactersModel from "../models/locationsUsersModel";

export async function addCharactersToLocation(
  locationId: string,
  characters: string[], // üí° –°–¥–µ–ª–∞–ª–∏ –º–∞—Å—Å–∏–≤–æ–º
  transaction: Transaction
): Promise<{ success: boolean; message: string; characterIds: string[] }> {
  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏
  console.log(locationId);
  const deletedCount = await LocationsCharactersModel.destroy({
    where: { location_id: locationId },
    transaction,
  });

  console.log(`Deleted ${deletedCount} old records for location ${locationId}`);

  if (characters.length === 0) {
    return {
      success: true,
      message: "No characters provided",
      characterIds: [],
    };
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ —Ä–µ–∞–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –ë–î
  const dbCharacters = await CharacterModel.findAll({
    where: { id: characters },
    transaction,
  });

  if (dbCharacters.length === 0) {
    return {
      success: false,
      message: "No valid characters found",
      characterIds: [],
    };
  }

  // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–µ —Å–≤—è–∑–∏
  const locationCharacters = dbCharacters.map((character) => ({
    location_id: locationId,
    character_id: character.id,
  }));

  await LocationsCharactersModel.bulkCreate(locationCharacters, {
    transaction,
  });

  return {
    success: true,
    message: "Characters successfully linked to location",
    characterIds: locationCharacters.map((c) => c.character_id), // üí° –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ ID
  };
}
